DeriveInput {
    attrs: [],
    vis: Visibility::Public(
        Pub,
    ),
    ident: Ident {
        ident: "Field",
        span: #0 bytes(1222..1227),
    },
    generics: Generics {
        lt_token: Some(
            Lt,
        ),
        params: [
            GenericParam::Type(
                TypeParam {
                    attrs: [],
                    ident: Ident {
                        ident: "T",
                        span: #0 bytes(1228..1229),
                    },
                    colon_token: None,
                    bounds: [],
                    eq_token: None,
                    default: None,
                },
            ),
        ],
        gt_token: Some(
            Gt,
        ),
        where_clause: None,
    },
    data: Data::Struct {
        struct_token: Struct,
        fields: Fields::Named {
            brace_token: Brace,
            named: [
                Field {
                    attrs: [],
                    vis: Visibility::Inherited,
                    mutability: FieldMutability::None,
                    ident: Some(
                        Ident {
                            ident: "value",
                            span: #0 bytes(1237..1242),
                        },
                    ),
                    colon_token: Some(
                        Colon,
                    ),
                    ty: Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        ident: "T",
                                        span: #0 bytes(1244..1245),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                },
                Comma,
                Field {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                ident: "debug",
                                                span: #0 bytes(1253..1258),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "0b{:08b}",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Inherited,
                    mutability: FieldMutability::None,
                    ident: Some(
                        Ident {
                            ident: "bitmask",
                            span: #0 bytes(1277..1284),
                        },
                    ),
                    colon_token: Some(
                        Colon,
                    ),
                    ty: Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        ident: "u8",
                                        span: #0 bytes(1286..1288),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                },
                Comma,
            ],
        },
        semi_token: None,
    },
}
